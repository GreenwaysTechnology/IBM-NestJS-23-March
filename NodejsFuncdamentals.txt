				Node.js
.....................................................................................
What is Node.js?
Why Node.js?
Arch of Node.js
Node Modules
Node async programming implementation
Node basic io modules
Node http modules
NPM basics
Introduction to Express
......

What is Node?
   Node is javascript platform and run time to run js code.

Javascript Runtime:
  
Types of js runtime.
1.Embeded mode
   Run time is embeded into another app eg: Browser

Every web browser has itswon js runtime
 =>Chrome - V8
 =>Firefox - Spider Monkey
 =>Edge -  Chakra

2.Standalone Mode
  V8 - Open source js engine

Node.js platform was created on V8 engine with "Non-Blocking Arch"

Why Node js was created?

   In order to build 'non blocking network apps'

What is Non blocking? and What is blocking?
 
 in order to understand this 

How web server works?
    
=>Request -Reply(response) model
=>When ever a request is received by web server , web server assigns or allocats a   thread  to handle complete request and response for a client.
 
Request Per Thread Model:
  Every web server receives a request and allocate a thread to serve the response.
  Till response is received a thread is waiting this is called as blocking
  lets say 5ms is waiting means, during that period that is blocked

What will happen if a thread is blocked for a particular time?

=>when you create a thread it takes some memory,some times a thread eats up to 5mb   memory.
=> When a thread is blocked for some time,os moves that thread to 'sleeping state'
   and brings that thread to 'active state' when io is ready which is called "context    switch" . when ctx switch happens most of the cpu time is wasted.

Based on this problem , new article/white paper was submitted "C10K" Problem

The C10k problem is the problem of optimizing network sockets to handle a large number of clients at the same time
   How to reduce cpu time, and memory?

Birth of new Arch "Non Blocking"

Objective:
  => How to avoid blocking a thread?
  => How to reduce no of threads?

in order to achive this we need to change os  IO arch itself.
....................................................................................
				IO fundamentals
....................................................................................

What is IO?
=>Input/output (IO) refers to interaction with devices such as a hard drive, network
 Generally anything that is not happening in the CPU is called IO

=>When you call an API that requests data from IO, you will not get a response instantly, but with some delay

=>This delay can be very small for requesting a file on a hard drive, and much longer when requesting data from a network


How IO Works in operating System?

File Descriptor:
File Descriptor is a low level program written in c language or assembly/machine lanage
File Descriptor is a program which is a bridge between application runtime and low level io channels(keyboard,monitor,hard drive,Network Interface Card(NEC))

How many fd?
  Every process has its own file descriptor instance
  When ever process is created, os initalizes file descriptor instance.

File Descriptor is just c program having two fields called index and value

index keeps the number and its value keeps the device location as pointer.

There are 3 default index and value

0 - keyboard - input
1 - Monitor-output
2 - error - output

....................................................................................
				How to read from disk file?
Blocking IO

 Every process thread will add entry into file descriptor table waits for io 
 until the threads is blocked

Non Blocking IO - IO Multiplexing:
..................................

Event Driven Programming is solution to implement non blocking or io Multiplexing.

Linux operating system introduced in 2000 the first non blocking system io api.

=>select api
  =>In this model the control is returned from the kernal immediatly without waiting
  =>Application makes explicit read call to read data from the kernal buffer
Here the drawbacks is two api calls.

=>Poll api
  =>Poll api was introduced to solve the problem of manual read call.
     =>Even driven model

=>Epoll api - which is very latest 

The first Non blocking arch introduced by the server called "Nginx".

The second non blocking arch introduced by Node.js

Node.js Platform Arch:
........................

There are two major components

1.V8
   It is javascript engine for running js code.
2.libuv
   libuv is a multi-platform support library with a focus on asynchronous I/O.
   libuv is platform non blocking io abstraction framework.

libvu provides

1.Non blocking api abstraction layer(network related apis)
2.Blocking api abstraction layer( some file system api....)

There are two thread types;

1.Non blocking threads
    Event loop thread:
      Receive request and handles events from the kernal.
Note : 
   Per Node process we have only one "event loop thread" available

2.Blocking threads
   Node provides set of threads (more threads) which are part of thread pool.
 The thread is from thread pool is used to perform blocking operations , long running process.
   Per Node process we have more "blocking loop thread" available
.....................................................................................

How to implement non blocking in programming?

=>High level api provided by node.js
=>Event processing programs-function -callback functions

Event Processing styles:
.......................
1.callback style
2.Promise style
3.Promise with async...await
4.Reactive Programming-Rxjs

callback is core style of handling events


How to run js code on node platform?

Js programs are executed in two modes

1.interactive mode - REPL mode
2.script mode - by loading script on to the runtime

1.Node REPL - Read Evalulate Print loop

Node REPL is used to run js programs interactive mode.

>node
node
Welcome to Node.js v16.15.0.
Type ".help" for more information.
> a=10
10
> b=20
20
> c =a + b
30
> Math.random()
0.33841885209828515
> "Hello".toUpperCase()
'HELLO'


2.script mode - by loading script on to the runtime

script mode

>node src/index.js

High level api provided by node.js

timer api -  delaying task
io apis - for doing io operations
 ->fs io
 ->network io
    -> http 
    -> tcp 
    -> udp
 

1.callbacks:
  Callback is listener function which gets registered during compile time
  and exexcuted during runtime when ever the event is emitted.

Req for async programming:
 
1.You need high level non blocking api - provided by node.js 
2.listener api which is called "function as parameter/hof" 

HOF functions are becoming listeners/callbacks which are called when ever event is emitted.

Basic Non Blocking code using timer:
//timer for simulating async task.

function blockMe(message) {
    console.log(message)
}

function delay(callback) {
    //  callback()
    //non blocking api
    setTimeout(callback, 5000)
}
blockMe('start')
delay(() => {
    console.log('hello')
})
blockMe('end')

....
Biz logic with callbacks:
//complex callback based code .
//resolve=success reject=failure
function login(userName, password, resolve, reject) {
    if (userName === 'admin' && password === 'admin') {
        setTimeout(resolve, 1000, 'login success')
    } else {
        setTimeout(reject, 1000, 'login failed')
    }
}
function blockMe(message) {
    console.log(message)
}


blockMe('start')

login('admin', 'admin', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
})

login('foo', 'bar', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
})

blockMe('end')
..............................
..................................................................................
			Nested Callbacks
.................................................................................

The output of one callback will be input into another callback -  async composition.

//callback nesting: the output of one callback will be input to another callback

//getUser ---> login ---> showdashboard

//callback nesting

const getUser = (resolve, reject) => {

    console.log('getUser is called')
    let user = {
        name: 'admin',
        password: 'admin'
    }
    //user = null
    if (user) {
        setTimeout(resolve, 1000, user)
    } else {
        setTimeout(reject, 1000, 'User not found')
    }
}
const login = (user, resolve, reject) => {
    console.log('login is called')
    if (user.name === 'admin' && user.password === 'admin') {
        setTimeout(resolve, 1000, 'login success')
    } else {
        setTimeout(reject, 1000, 'login failed')
    }
}
const showDashborad = (status, resolve, reject) => {
    console.log('showDashboard is called')
    if (status === 'login success') {
        setTimeout(resolve, 1000, 'Welcome to User')
    } else {
        setTimeout(reject, 1000, 'Welcome to Guest')
    }
}

getUser(user => {
    login(user, status => {
        showDashborad(status, userPage => {
            console.log(userPage)
        }, guestPage => {
            console.log(guestPage)
        })
    }, err => {
        console.log(err)
    })
}, err => { console.log(err) })
....................................................................................
				Callback Hell
....................................................................................

getUser(user => {
    //call login
    login(user, status => {
        //call dashboard
        dashboard(status, adminPage => console.log(adminPage), err => console.log(err))
    }, err => console.log(err))
}, err => console.log(err))

Questions:

1.Whether this code is able to understand quickly
2.Whether this code is able to debug
3.Whehter this code is scalable?
4.whether this code is maintaiable?

No
 "Callback Hell"

fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }
})

Callback Hell:

 -It is not bug or error in code
 -It is way of writing callback based program
 -Callback based non blocking programming hard to understand,maintain,debug,scale Which   called as "Callback Hell".
....................................................................................
			How to write clean async/non blocking code.

Promises:

What is Promise?
   Promise is design Pattern. 
   Promise abstracts the complexity of callbacks.

Promise Implementation:
   Promise Design pattern evolved in 2005.
   Many provided implementation for Promises
   In ES6 ,Promise Design implemented as Promise Object.

Features of Promise Object:
1.Promise by deafult is Async. Which implements timer api with 0 ms .
2.Promise can be used with any async callback based  implementations.

Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.


Difference between callbacks and promises:

Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.
....................................................................................

		Promise Implemenation: Object Object creations
...................................................................................

1. Create Promise Object from Promise contructor
      new Promise()
2. Create Promise object from factory apis 
      Promise.resolve() / Promise.reject()

Promise object methods:

1.then - success
2.catch - errors
3.finally - clean up

factory api to create Promise object
4.resolve
5.reject
.......................................
6.all
7.race

1.Promise factory api
   -success - resolve
   -failure - reject

By Default Async:
//Promise implementation: Promise by default async

function blockMe(message) {
    console.log(message)
}

function delay() {
    return Promise.resolve('Hello') //Return Promise with success
}

blockMe('start')
delay().then(status => console.log(status))
blockMe('end')
..........
Promise with Success and Failure using factory api:
...................................................

function login(userName, password) {
    if (userName === 'admin' && password === 'admin') {
        return Promise.resolve('login success')
    } else {
        return Promise.reject('login failed')
    }
}
function blockMe(message) {
    console.log(message)
}


blockMe('start')

login('admin', 'admin')
    .then(status => {
        console.log(status)
    })
    .catch(err => console.log(err))


blockMe('end')

2.Promise Constructor Api
.........................

i want to return users after 1000ms
if i want to wrap any existing callback based program into promise based 

         "You have to use Promise Constructor Pattern"

//promise constructors
function login(userName, password) {
    return new Promise((resolve, reject) => {
        if (userName === 'amdin' && password === 'admin') {
            setTimeout(resolve, 1000, 'login success')
        } else {
            setTimeout(reject, 1000, 'login success')
        }
    })
}
function blockMe(message) {
    console.log(message)
}


blockMe('start')

login('admin', 'admin')
    .then(status => {
        console.log(status)
    })
    .catch(err => console.log(err))


blockMe('end')
.....................................................................................
Callback Hell and Promises
...................................................................................
//callback nesting

const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = {
            name: 'admin',
            password: 'admin'
        }
        //user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, 'User not found')
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin' && user.password === 'admin') {
            setTimeout(resolve, 1000, 'login success')
        } else {
            setTimeout(reject, 1000, 'login failed')
        }
    })
}
const showDashborad = status => {
    console.log('showDashboard is called')
    return new Promise((resolve, reject) => {
        if (status === 'login success') {
            setTimeout(resolve, 1000, 'Welcome to User')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest')
        }
    })
}

// getUser(user => {
//     login(user, status => {
//         showDashborad(status, userPage => {
//             console.log(userPage)
//         }, guestPage => {
//             console.log(guestPage)
//         })
//     }, err => {
//         console.log(err)
//     })
// }, err => { console.log(err) })

getUser()
    .then(user => {
        return login(user)
    })
    .then(status => {
        return showDashborad(status)
    })
    .then(page => {
        console.log(page)
    })
    .catch(err => {
        console.log(err)
    })
....................................................................................
				Promise Hell
..................................................................................
Multi thens makes code more complex to read,maintain,debug-Promise hell.

How to solve the Promise Hell?

Using async await keywords...

Async ...await keywords:

1.async keyword is used infront of function declaration- async function
2.async functions by default return promise with success result always
2.async functions can wrap expclit apis with promise.


function blockMe(message) {
    console.log(message)
}

//async function returns Promises default.
async function delay() {
    return 'Hello' //Return Promise with success
}

function main() {
    blockMe('start')
    delay().then(status => console.log(status))
    blockMe('end')
}
main()

How to avoid then and catch?

function blockMe(message) {
    console.log(message)
}

//async function returns Promises default.
async function delay() {
    return 'Hello' //Return Promise with success
}

async function main() {
    blockMe('start')
    //delay().then(status => console.log(status))
    const message = await delay()
    console.log(message)
    blockMe('end')
}
main()

................
How to avoid promise thenables?

const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = {
            name: 'admin',
            password: 'admin'
        }
        //user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, 'User not found')
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin' && user.password === 'admin') {
            setTimeout(resolve, 1000, 'login success')
        } else {
            setTimeout(reject, 1000, 'login failed')
        }
    })
}
const showDashborad = status => {
    console.log('showDashboard is called')
    return new Promise((resolve, reject) => {
        if (status === 'login success') {
            setTimeout(resolve, 1000, 'Welcome to User')
        } else {
            setTimeout(reject, 1000, 'Welcome to Guest')
        }
    })
}

async function main() {
    // getUser()
    //     .then(user => {
    //         return login(user)
    //     })
    //     .then(status => {
    //         return showDashborad(status)
    //     })
    //     .then(page => {
    //         console.log(page)
    //     })
    //     .catch(err => {
    //         console.log(err)
    //     })
    try {
        const user = await getUser()
        const status = await login(user)
        const page = await showDashborad(status)
        console.log(page)
    }
    catch (err) {
        console.log(err)
    }

}
main()
.....................................................................................
			Third Party Frameworks
.....................................................................................
			    Express.js 
....................................................................................
What is express.js
  Express.js is the first web framework built for node js and built by node js core team.
  Express.js is wrapper around core http module.
  Express is abstraction for creating Web Applications for node http core module.

Express can be used to small to medium scale apps only.

Types of apps we can build using express.js

1.Dynamic web apps
2.Rest apis

How to write express apps?

1.using vannila node project and install express framework
2.using express generator - tool used to create express apps.

express core concepts:
 In express everything object

express - function
  used to create express objects

1.Application 
2.Request
3.Response
4.Router

1.Application Object
  =>It represents the whole express app
  =>It is container object which contains other objects
  =>It is created by calling express function
  =>Per Application only one app instance

Application Object
  =>You can expose the global end points
  =>You configure middlewares
  =>you can render views
  =>you can register template engines
  =>You can start web container...		

Steps:

mkdir express-app
cd express-app
npm init
npm install express


const express = require('express')
// console.log(express)
//create application object
const app = express()

//console.log(app) 
//apis 
//home page
app.get('/', (req, res) => {
    res.end('Home')
})
//todos 
app.get('/api/todos', (req, res) => {
    res.end('todos')
})
app.post('/api/todos', (req, res) => {
    res.end('todos post')
})
app.put('/api/todos', (req, res) => {
    res.end('todos put')
})
app.delete('/api/todos', (req, res) => {
    res.end('todos delete')
})
//users
app.get('/api/users', (req, res) => {
    res.end('users')
})
app.post('/api/users', (req, res) => {
    res.end('users post')
})

app.put('/api/users', (req, res) => {
    res.end('users put')
})
app.delete('/api/users', (req, res) => {
    res.end('users delete')
})
//start express server
app.listen(3000, () => {
    console.log('Express Server is listening')
})
..................................................................................
			...................................................................................
				Resources

When we build rest apis, apis are classified based on resources(domains)
each resource has get,post,delete,put end points.

In order to build resource based apps, we need to modularize the app.

users
todos
comments
customers

How to modularize?

 src
  |
  routers
    |
    todos
    users
    customers
 services
    todos
    users
 app.js/index.js -root app



Eg:
 service

const todos = require('../mockdata/todos')

class TodoService {
    constructor() { }
    findAll() {
        return Promise.resolve(todos)
    }
}
module.exports = new TodoService()

router

const express = require('express')
const { findAll } = require('../services/todo.service')

const todoRouter = express.Router()

//GET /api/todos
todoRouter.get('', async (req, res) => {
    try {
        const todos = await findAll()
        res.status(200).json(todos)
    }
    catch (err) {
        res.status(400).json(err)
    }

})
//GET /api/todos/list
todoRouter.get('/list', async (req, res) => {
    try {
        const todos = await findAll()
        res.status(200).json(todos)
    }
    catch (err) {
        res.status(400).json(err)
    }

})
//GET /api/todos/save
todoRouter.post('/save', (req, res) => {
    res.end('todos post')
})
//GET /api/todos/update
todoRouter.put('/update', (req, res) => {
    res.end('todos put')
})
//GET /api/todos/update
todoRouter.delete('/remove', (req, res) => {
    res.end('todos delete')
})

module.exports = todoRouter
.....................................................................................
const express = require('express')
const app = express()
const todosRouter = require('./routers/todos.router')

//configure routers with app object so that , request will be dispatched to routers

app.use('/api/todos',todosRouter)

//Global apis 
app.get('/', (req, res) => {
    res.end('Home')
})

//start express server
app.listen(3000, () => {
    console.log('Express Server is listening')
})
.............................&&&&&&&&&&&&&&&&&&.....................................



















